{
  "name": "autonimate",
  "publisher": "autonimate",
  "displayName": "Autonimate: DevGPT",
  "icon": "images/ai-logo.png",
  "description": "An autonomous development plugin, Autonimate AI Copilot, powered by OpenAI.",
  "version": "1.0.1",
  "aiKey": "",
  "repository": {
    "url": "https://github.com/Cytranics/vscode-autonimate"
  },
  "engines": {
    "vscode": "^1.73.0"
  },
 "categories": [
  "Data Science",
  "Formatters",
  "Programming Languages",
  "Linters",
  "Machine Learning"
],
"keywords": [
  "gpt-4",
  "openai",
  "codex",
  "chatgpt",
  "code generation",
  "AI in editor",
  "programming help",
  "autonomous coding",
  "AI-powered development",
  "code suggestions",
  "code completion",
  "code refactoring",
  "AI assistant",
  "software engineering",
  "coding assistant"
],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "menus": {
      "editor/context": [
        {
          "command": "autonimate.generateCode",
          "group": "autonimate@1",
          "when": "editorHasSelection && generateCode-enabled"
        },
        {
          "command": "autonimate.refactorCode",
          "group": "autonimate@2",
          "when": "editorHasSelection && refactorCode-enabled"
        },
        {
          "command": "autonimate.findProblems",
          "group": "autonimate@3",
          "when": "editorHasSelection && findProblems-enabled"
        },
        {
          "command": "autonimate.optimize",
          "group": "autonimate@4",
          "when": "editorHasSelection && optimize-enabled"
        },
        {
          "command": "autonimate.explain",
          "group": "autonimate@5",
          "when": "editorHasSelection && explain-enabled"
        },
        {
          "command": "autonimate.addComments",
          "group": "autonimate@6",
          "when": "editorHasSelection && addComments-enabled"
        },
        {
          "command": "autonimate.completeCode",
          "group": "autonimate@7",
          "when": "editorHasSelection && completeCode-enabled"
        },
        {
          "command": "autonimate.adhoc",
          "group": "autonimate@8",
          "when": "editorHasSelection && adhoc-enabled"
        },
        {
          "command": "autonimate.customPrompt1",
          "group": "autonimate@9",
          "when": "editorHasSelection && customPrompt1-enabled"
        },
        {
          "command": "autonimate.customPrompt2",
          "group": "autonimate@10",
          "when": "editorHasSelection && customPrompt2-enabled"
        }
      ]
    },
    "commands": [
      {
        "command": "autonimate.freeText",
        "title": "Autonimate: Ask Anything!"
      },
      {
        "command": "autonimate.clearSession",
        "title": "Autonimate: Reset session"
      },
      {
        "command": "autonimate.generateCode",
        "title": "Autonimate-Codex: Generate code",
        "enablement": "editorHasSelection"
      },
      {
        "command": "autonimate.refactorCode",
        "title": "Autonimate: Refactor Code",
        "enablement": "editorHasSelection"
      },
      {
        "command": "autonimate.findProblems",
        "title": "Autonimate: Debug Code",
        "enablement": "editorHasSelection"
      },
      {
        "command": "autonimate.optimize",
        "title": "Autonimate: Optimize Code",
        "enablement": "editorHasSelection"
      },
      {
        "command": "autonimate.explain",
        "title": "Autonimate: Explain Code",
        "enablement": "editorHasSelection"
      },
      {
        "command": "autonimate.addComments",
        "title": "Autonimate: Add Comments",
        "enablement": "editorHasSelection"
      },
      {
        "command": "autonimate.completeCode",
        "title": "Autonimate: Complete Code",
        "enablement": "editorHasSelection"
      },
      {
        "command": "autonimate.adhoc",
        "title": "Autonimate: Ad-hoc prompt",
        "enablement": "editorHasSelection"
      },
      {
        "command": "autonimate.customPrompt1",
        "title": "Autonimate: Custom prompt 1",
        "enablement": "editorHasSelection"
      },
      {
        "command": "autonimate.customPrompt2",
        "title": "Autonimate: Custom prompt 2",
        "enablement": "editorHasSelection"
      },
      {
        "command": "autonimate.clearConversation",
        "title": "Autonimate: Clear conversation"
      },
      {
        "command": "autonimate.exportConversation",
        "title": "Autonimate: Export conversation"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "vscode-chatgpt-view-container",
          "title": "Autonimate",
          "icon": "images/ai-logo-in.png"
        }
      ]
    },
    "views": {
      "vscode-chatgpt-view-container": [
        {
          "type": "webview",
          "id": "autonimate.view",
          "name": "Conversation window"
        }
      ]
    },
    "configuration": {
      "title": "Autonimate",
      "properties": {
        "autonimate.method": {
          "type": "string",
          "enum": [
            "OpenAI",
            "Azure"
          ],
          "default": "OpenAI",
          "markdownDescription": "Choose your API Provider",
          "order": 1,
          "markdownEnumDescriptions": [
            "Choose your API provider. OpenAI and Azure Supported. "
          ]
        },
        "autonimate.apiKey": {
          "type": "string",
          "markdownDescription": "Azure or OpenAI API Key",
          "order": 2
        },
        "autonimate.apiBaseUrl": {
          "type": "string",
          "default": "https://api.openai.com/v1",
          "markdownDescription": "OpenAI Base URL.",
          "order": 3
        },
        "autonimate.azureBaseURL": {
          "type": "string",
          "markdownDescription": "Azure Base URL. Example: https://name.openai.azure.com/",
          "order": 5
        },
        "autonimate.azuredeployment": {
          "type": "string",
          "markdownDescription": "Please provide the name you assigned to your Azure model deployment. This refers to the name you created when you deployed the model, not the model itself. For example, it could be GPT-4-Deployment",
          "order": 4
        },
        "autonimate.model": {
          "type": "string",
          "enum": [
            "gpt-4",
            "gpt-4-0613",
            "gpt-4-32k-0613",
            "gpt-3.5-turbo",
            "gpt-3.5-turbo-0301",
            "gpt-3.5-turbo-0613",
            "gpt-3.5-turbo-16k",
            "gpt-3.5-turbo-16k-0613"
          ],
          "default": "gpt-3.5-turbo-16k",
          "markdownDescription": "Model Choices when using OpenAI.",
          "order": 6,
          "enumItemLabels": [
            "GPT-4",
            "GPT-4 (June 13)",
            "GPT-4 32K (June 13)",
            "GPT-3.5 Turbo",
            "GPT-3.5 Turbo (March 1)",
            "GPT-3.5 Turbo (June 13)",
            "GPT-3.5 Turbo 16k",
            "GPT-3.5 Turbo 16k (June 13)"
          ],
          "markdownEnumDescriptions": [
            "8k GPT-4: More capable than any GPT-3.5 model, able to do more complex tasks, and optimized for chat. Will be updated with our latest model iteration 2 weeks after it is released.",
            "8k Snapshot of `gpt-4` from June 13th 2023 with function calling data. Unlike `gpt-4`, this model will not receive updates, and will be deprecated 3 months after a new version is released.",
            "32k Snapshot of `gpt-4-32` from June 13th 2023. Unlike `gpt-4-32k`, this model will not receive updates, and will be deprecated 3 months after a new version is released.",
            "4k GPT-3.5 Turbo: Most capable GPT-3.5 model and optimized for chat at 1/10th the cost of `text-davinci-003`. Will be updated with our latest model iteration 2 weeks after it is released.",
            "4k Snapshot of `gpt-3.5-turbo` from March 1st.",
            "4k Snapshot of `gpt-3.5-turbo` from June 13th 2023 with function calling data. Unlike `gpt-3.5-turbo`, this model will not receive updates, and will be deprecated 3 months after a new version is released.",
            "16k version of `gpt-3.5-turbo` with 4 times the context.",
            "16k Snapshot of `gpt-3.5-turbo-16k` from June 13th 2023. Unlike `gpt-3.5-turbo-16k`, this model will not receive updates, and will be deprecated 3 months after a new version is released."
          ]
        },
        "autonimate.maxTokens": {
          "type": "number",
          "default": 4000,
          "markdownDescription": "Sets the max number of tokens (characters or words) for the model's output. The total tokens, including the input and output, must not exceed the model's maximum context length (e.g., 4096 for `gpt-3.5-turbo` and 8192 for `gpt-4`). If exceeded, you'll need to reduce the text. More details in the [Documentation](https://beta.openai.com/docs/api-reference/completions/create#completions/create-max_tokens).",
          "order": 7
        },
        "autonimate.promptPrefix.refactorCode": {
          "type": "string",
          "default": "Act as a software engineer specializing in clean code principles and modern programming practices. You are given the task of refactoring the following code provided below. Please consider the following aspects: Improve code readability: Strive for clarity and simplicity, ensuring anyone can understand the purpose and logic of the code. Optimize the code: Identify and eliminate any inefficiencies, favoring speed and resource utilization. Reduce code duplication: Use appropriate design patterns and methods to avoid repeating code blocks. Incorporate error handling: Implement robust error and exception handling, ensuring the code can recover from unexpected situations. Proper formatting: Adhere to the best practice guidelines of the language for code indentation, naming conventions, and other syntactical matters. Add logging: Implement comprehensive logging to trace the code execution path, especially during error situations. Use language's best practices: Ensure you apply the best techniques, idioms, and practices of the language, based on the latest training data. Please note that the code should be as up-to-date and relevant as possible, reflecting modern programming practices rather than outdated methods. Here is the code to refactor: ",
          "description": "Refactor code prompt.",
          "order": 8
        },
        "autonimate.promptPrefix.refactorCode-enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable the refactor code context menu",
          "order": 9
        },
        "autonimate.promptPrefix.findProblems": {
          "type": "string",
          "default": "Act as a software developer or a code reviewer. Given the code snippet provided, use your understanding of software design principles, programming best practices, and common coding errors to evaluate it critically. Look out for issues related to syntax, semantics, error handling, performance, and security. Consider both glaring issues and subtler ones, such as anti-patterns, poorly-named variables, inappropriate comments, or sub-optimal data structures and algorithms. Additionally, try to assess whether the code adheres to common coding standards for readability, simplicity, and maintainability. If the language in which the code is written has established style guides, like PEP8 for Python, consider these too. Finally, provide specific recommendations for how to fix any problems you identify, and explain why these fixes are necessary. Do remember, however, that this exercise is purely theoretical as you can't actually execute the code. So your evaluation will be based on your training and theoretical understanding of coding principles up until 2021. Here's the code:",
          "description": "Find problems prompt.",
          "order": 10
        },
        "autonimate.promptPrefix.findProblems-enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable the find problems context menu",
          "order": 11
        },
        "autonimate.promptPrefix.optimize": {
          "type": "string",
          "default": "Act as a seasoned software engineer who is an expert in Python. Your task is to optimize the following piece of code, aiming to increase its runtime efficiency without sacrificing its correctness or readability. Comment on each modification you make, explaining why the changes improve the performance. Here is the code",
          "description": "Optimize code prompt.",
          "order": 12
        },
        "autonimate.promptPrefix.optimize-enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable optimization context menu",
          "order": 13
        },
        "autonimate.promptPrefix.explain": {
          "type": "string",
          "default": "Please act as a professional software engineer with expertise in various programming languages. Break down the code line by line, explaining what each part does, the logic behind it, and the overall function of the code. If there are any important concepts or techniques being used, please explain them as well. If you notice any potential issues or areas for improvement, point them out and provide suggestions for how they could be addressed. Try to explain in a way that someone with basic programming knowledge could understand.",
          "description": "Explain code prompt.",
          "order": 14
        },
        "autonimate.promptPrefix.explain-enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable explain code context menu",
          "order": 15
        },
        "autonimate.promptPrefix.addComments": {
          "type": "string",
          "default": "I'd like you to act as an experienced software engineer who specializes in code review and documentation. I have a piece of code for which I need comprehensive comments. I'm looking for explanatory comments that detail what each part of the code does and why it's necessary. If there are any potential improvements or issues you see, please note them as well. Try to use simple and accessible language to make the explanations clear for beginners as well as experienced developers. Please include an explanation of the overall function of the code, a line-by-line breakdown where necessary, and any potential improvements. Your expertise in making this code understandable and maintainable will be greatly appreciated.",
          "description": "Add comments prompt.",
          "order": 16
        },
        "autonimate.promptPrefix.addComments-enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable add comments context menu",
          "order": 17
        },
        "autonimate.promptPrefix.completeCode": {
          "type": "string",
          "default": "Act as a senior software engineer.  I have an unfinished piece of code that's missing some key functionalities. Take into account best practices for code optimization, maintainability, and readability. Also, consider potential edge cases and handle any potential errors gracefully. Please complete the code adhering to these requirements and provide an explanation of your design decisions and logic.",
          "description": "Complete code prompt.",
          "order": 18
        },
        "autonimate.promptPrefix.completeCode-enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable complete code context menu",
          "order": 19
        },
        "autonimate.promptPrefix.customPrompt1": {
          "type": "string",
          "default": "",
          "description": "This is your customizable prompt. It is turned off by default. To use a custom prompt, please input it here and then enable this setting.",
          "order": 20
        },
        "autonimate.promptPrefix.customPrompt1-enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable Custom Prompt 1",
          "order": 21
        },
        "autonimate.promptPrefix.customPrompt2": {
          "type": "string",
          "default": "Act as a senior software engineer.  I have an unfinished piece of code that's missing some key functionalities. Take into account best practices for code optimization, maintainability, and readability. Also, consider potential edge cases and handle any potential errors gracefully. Please complete the code adhering to these requirements and provide an explanation of your design decisions and logic. Please note that for this exercise, you should assume that you have a strong understanding of the language the code is written in and that you're familiar with best practices for writing clean, efficient code in that language. Additionally, please point out any potential trade-offs that might come with your refactoring, such as readability vs performance. Let's ensure the resulting code is something that a team of diverse software engineers could easily understand and maintain.",
          "description": "This is your second customizable prompt. It is not activated by default. If you wish to use a custom prompt, enter it here and make sure to enable this setting.",
          "order": 22
        },
        "autonimate.promptPrefix.customPrompt2-enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable Custom Prompt 2",
          "order": 23
        },
        "autonimate.promptPrefix.adhoc-enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable the prompt prefix used for adhoc command for the selected code in the context menu",
          "order": 24
        },
        
        "autonimate.temperature": {
          "type": "number",
          "default": 0.2,
          "markdownDescription": "Sets the sampling 'temperature'. Higher values result in riskier outputs, making the model more creative. A value of 0.9 is suggested for creative applications, while 0 is for tasks with a well-defined answer. It's advisable to adjust either this or `top_p`, not both. More info in the [Documentation](https://beta.openai.com/docs/api-reference/completions/create#completions/create-temperature).",
          "order": 36
        },
        "autonimate.top_p": {
          "type": "number",
          "default": 0,
          "markdownDescription": "Defines 'nucleus sampling', an alternative to temperature sampling. The model will consider tokens within the top `top_p` probability mass. For instance, 0.1 would consider the top 10% probability tokens. It's advisable to adjust either this or `temperature`, not both. More info in the [Documentation](https://beta.openai.com/docs/api-reference/completions/create#completions/create-top_p). **Note: OpenAI API Key is required for this setting.**",
          "order": 37
        },
        "autonimate.response.showNotification": {
          "type": "boolean",
          "default": false,
          "description": "Enables notifications when the ChatGPT bot responds to your input.",
          "order": 38
        },
        "autonimate.response.autoScroll": {
          "type": "boolean",
          "default": true,
          "description": "With this enabled, the extension will automatically scroll to the bottom when a new question or response is added. To change this, disable the setting.",
          "order": 39
        },
        "autonimate.systemPrompt": {
          "type": "string",
          "default": "Assume the role of a seasoned software architect who's guiding a software developer through a complex project. You're assisting this developer who is using Visual Studio Code, with an open source code document that they just uploaded.  Firstly, provide a meticulously detailed pseudocode plan, addressing each step to follow when building the software, keeping in mind the developer's work environment. Consider aspects like the editors with open files, integrated unit test support, and an output pane displaying the output of running the code as well as an integrated terminal.  Next, provide the final code, enclosed in a single Markdown-formatted code block. Precede this code block with the programming language name. As you do this, remember to keep any other textual explanations to a bare minimum. Your responses should be concise, professional, and impersonal.  Despite the brief nature of your responses, ensure they're well-structured and make good use of Markdown formatting for clarity and easy understanding.  Remember that you have only one chance to respond in each turn of the conversation.  Finally, at the end of your response, provide a few short and relevant suggestions for the next possible user prompts. These should align with the ongoing software development conversation.",
          "markdownDescription": "The system prompt is a pre-defined text that will be automatically included at the beginning of each API call.",
          "order": 41
        },
        "autonimate.systemAppendPrompt": {
          "type": "string",
          "default": "Response Format: You must include the entire updated version of the code provided, regardless of its length or complexity, to ensure you can use it right away. Don't omit any parts of the code for the sake of brevity. You should be able to copy and paste the revised code directly into your own development environment. Additionally, please provide clear, detailed explanations for each adjustment or improvement you make, so that you can understand and learn from your changes.",
          "markdownDescription": "The 'system append prompt' is a predefined text automatically appended at the end of each API call, following your code. This feature assists in maintaining a continuous narrative or 'tree of thought' during the conversation, guiding the AI to provide more contextually relevant and coherent responses.",
          "order": 42
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "rimraf out && npm run esbuild-base -- --minify",
    "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
    "build": "npm run -S esbuild-base -- --sourcemap",
    "watch": "npm run -S esbuild-base -- --sourcemap --watch",
    "fmt": "prettier --write \"src/**/*.ts\"&& npm run test -- --fix",
    "test": "eslint src --ext ts && tsc --noEmit"
  },
  "devDependencies": {
    "@types/glob": "^8.0.0",
    "@types/isomorphic-fetch": "^0.0.36",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@types/uuid": "^9.0.0",
    "@types/vscode": "^1.73.0",
    "@types/vscode-webview": "^1.57.0",
    "@typescript-eslint/eslint-plugin": "^5.45.0",
    "@typescript-eslint/parser": "^5.45.0",
    "@vscode/test-electron": "^2.2.0",
    "esbuild": "^0.15.18",
    "eslint": "^8.28.0",
    "glob": "^8.0.3",
    "mocha": "^10.1.0",
    "ts-loader": "^9.4.1",
    "typescript": "^4.9.3"
  },
  "dependencies": {
    "delay": "^5.0.0",
    "diff": "^5.1.0",
    "eventsource-parser": "^0.1.0",
    "gpt3-tokenizer": "^1.1.5",
    "isomorphic-fetch": "^3.0.0",
    "keyv": "^4.5.2",
    "openai": "^4.0.0-beta.4",
    "p-timeout": "^6.1.1",
    "puppeteer": "^19.4.0",
    "puppeteer-extra": "^3.3.4",
    "puppeteer-extra-plugin-stealth": "^2.11.1",
    "puppeteer-extra-plugin-user-data-dir": "^2.4.0",
    "puppeteer-extra-plugin-user-preferences": "^2.4.0",
    "quick-lru": "^6.1.1",
    "remark": "^14.0.2",
    "strip-markdown": "^5.0.0",
    "uuid": "^9.0.0"
  },
  "resolutions": {
    "clone-deep": "^4.0.1"
  }
}
